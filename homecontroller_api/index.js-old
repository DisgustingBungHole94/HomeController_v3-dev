const fs = require('fs');
const https = require('https');

const certFile = fs.readFileSync('cert/fullchain.pem');
const privKeyFile = fs.readFileSync('cert/privkey.pem');

const express = require('express');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());

const port = 4435;

const credentials = {
    key: privKeyFile,
    cert: certFile
};

app.post('/login', (req, res) => {
    if (!req.body.username || !req.body.password) {
        res.status(400);
        res.send({
            success: false,
            error_msg: 'bad request',
            error_code: 1
        });
    }

    if (req.body.username !== 'test' || req.body.password !== '1234') {
        res.status(401);
        res.send({
            success: false,
            error_msg: 'invalid credentials',
            error_code: 2
        });
    }
    else {
        res.status(200);
        res.send({
            success: true,
            token: 'abc123',
        });
    }
});

app.post('/register_device', (req, res) => {
    if (!req.body.device_type || !req.body.device_name || !req.body.device_note) {
        res.status(400);
        res.send({
            success: false,
            error_msg: 'bad request',
            error_code: 3
        });
    } else {
        res.status(200);
        res.send({
            success: true,
            device_id: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB',
            node_host: 'localhost',
            node_port: '4434'
        });
    }
});

app.post('/validate_node/user', (req, res) => {
    res.status(200);
    res.send({
        success: true,
        user_id: 'abc123'
    });

    res.end();
});


app.post('/validate_node/device', (req, res) => {
    if (!req.body.device_id) {
        res.status(400);
        res.send({
            success: false,
            error_msg: 'bad request',
            error_code: 4
        });
    } else {
        res.status(200);
        res.send({
            success: true,
            user_id: 'abc123'
        });
    }

    res.end();
});

app.get('/device', (req, res) => {
    res.status(200);
    res.send({
        success: true,
        nodes: [
            {
                id: 'abc123',
                host: 'localhost',
                port: '4434'
            }
        ],
        devices: [
            {
                id: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB',
                node_id: 'abc123',
                type: 'test',
                name: 'Test Device',
                note: 'I am a test device!'
            }
        ]
    });
    res.end();
})

const httpsServer = https.createServer(credentials, app);
httpsServer.keepAliveTimeout = 30000;

httpsServer.listen(port);

console.log('listening on ' + port);